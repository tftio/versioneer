# peter-hook configuration for versioneer
# Aggressive linting configuration following CLI rules

# TOML linting hooks
[hooks.toml-format]
command = "taplo format --check"
modifies_repository = false
files = ["**/*.toml"]
description = "Check TOML file formatting with taplo"

[hooks.toml-lint]
command = "taplo check"
modifies_repository = false
files = ["**/*.toml"]
depends_on = ["toml-format"]
description = "Lint TOML files for syntax and validation errors"

# Rust formatting and compilation
[hooks.rust-format]
command = "cargo fmt -- --check"
modifies_repository = false
files = ["**/*.rs", "Cargo.toml"]
description = "Check Rust code formatting with rustfmt"

[hooks.cargo-check]
command = "cargo check --all-targets --all-features"
modifies_repository = false
files = ["**/*.rs", "Cargo.toml"]
depends_on = ["rust-format"]
description = "Check that all code compiles"

# Aggressive clippy linting
[hooks.clippy-aggressive]
command = "cargo clippy --all-targets --all-features -- -D warnings -D clippy::all -W clippy::pedantic -W clippy::nursery -W clippy::cargo -A clippy::multiple_crate_versions"
modifies_repository = false
files = ["**/*.rs", "Cargo.toml"]
depends_on = ["cargo-check"]
description = "Run clippy with aggressive linting rules"

# Security auditing
[hooks.cargo-audit]
command = "cargo audit"
modifies_repository = false
run_always = true
description = "Check for security vulnerabilities in dependencies"

[hooks.cargo-deny]
command = "cargo deny check"
modifies_repository = false
files = ["Cargo.toml", "Cargo.lock", "deny.toml"]
depends_on = ["cargo-audit"]
description = "Check dependency licenses and security advisories"

[hooks.unused-deps]
command = "cargo machete"
modifies_repository = false
files = ["Cargo.toml"]
description = "Check for unused dependencies"

# Documentation and testing
[hooks.doc-check]
command = "cargo doc --no-deps --document-private-items --all-features"
modifies_repository = false
files = ["**/*.rs"]
env = { RUSTDOCFLAGS = "-D warnings -D rustdoc::broken_intra_doc_links" }
description = "Check that documentation builds without warnings"

[hooks.test-suite]
command = "cargo test --all-features"
modifies_repository = false
files = ["**/*.rs", "Cargo.toml"]
depends_on = ["clippy-aggressive"]
description = "Run all tests"

# Pre-commit group - comprehensive checks
[groups.pre-commit]
includes = [
  "toml-format",
  "toml-lint",
  "rust-format",
  "cargo-check",
  "clippy-aggressive",
  "cargo-audit",
  "cargo-deny",
  "unused-deps",
  "doc-check",
  "test-suite",
]
execution = "sequential"
description = "Pre-commit checks: formatting, linting, security, and testing"

# Commit message validation
[hooks.commit-msg-length]
command = "sh"
args = [
  "-c",
  "head -n1 \"$1\" | wc -c | awk '{if ($1 > 72) {print \"Commit message first line too long (\" $1 \" chars, max 72)\"; exit 1}}'",
  "--",
]
modifies_repository = false
description = "Check commit message first line length"

[groups.commit-msg]
includes = ["commit-msg-length"]
execution = "sequential"
description = "Validate commit message format"

# Pre-push hooks - additional expensive checks (commented out until tools installed)
# [hooks.semver-check]
# command = "cargo semver-checks"
# modifies_repository = false
# description = "Check for SemVer compliance"

# [hooks.unsafe-analysis]
# command = "cargo geiger"
# modifies_repository = false
# description = "Analyze unsafe code usage"

# [groups.pre-push]
# includes = ["semver-check", "unsafe-analysis"]
# execution = "parallel"
# description = "Pre-push checks: comprehensive testing and validation"
