# Versioneer project hooks - using shared Rust quality library
# Imports comprehensive hooks from shared library

imports = ["/Users/jfb/.local/peter-hook/shared.toml"]

# =============================================================================
# PROJECT-SPECIFIC HOOK GROUPS
# =============================================================================

[groups.pre-commit]
includes = ["comprehensive-pre-commit"]
execution = "sequential"
description = "Complete pre-commit quality assurance using shared hooks"

[groups.commit-msg]
includes = ["commit-validation"]
execution = "sequential"
description = "Commit message validation using shared hooks"

# =============================================================================
# VERSION MANAGEMENT HOOKS
# =============================================================================

[hooks.version-sync-check]
command = "versioneer"
args = ["verify"]
include = ["Cargo.toml", "VERSION"]
description = "Verify all version files are synchronized"

[hooks.tag-version-check]
command = "sh"
args = ["-c", '''
if git describe --exact-match --tags HEAD 2>/dev/null | grep -q "versioneer-v"; then
    TAG_VERSION=$(git describe --exact-match --tags HEAD | sed "s/versioneer-v//")
    CARGO_VERSION=$(versioneer show)
    if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
        echo "❌ ERROR: Git tag version ($TAG_VERSION) doesn't match Cargo version ($CARGO_VERSION)"
        echo "Use 'versioneer tag' to create tags that match the current version"
        exit 1
    fi
    echo "✅ Tag version matches Cargo version: $TAG_VERSION"
fi
''']
include = ["Cargo.toml", "VERSION"]
description = "Verify git tag version matches Cargo.toml version"

[groups.pre-push]
hooks = ["version-sync-check", "tag-version-check"]
execution = "sequential"
description = "Version consistency validation before push"

# Pre-push hooks - additional expensive checks (commented out until tools installed)
# [hooks.semver-check]
# command = "cargo semver-checks"
# modifies_repository = false
# description = "Check for SemVer compliance"

# [hooks.unsafe-analysis]
# command = "cargo geiger"
# modifies_repository = false
# description = "Analyze unsafe code usage"